package exercise1;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;

public class Consumer extends Thread {
	private List<Buffer> buffers;
	private CountDownLatch startLatch;
	
	private Lock lock;
	private Condition consumable;
	
	public Consumer(String name, List<Buffer> buffers, CountDownLatch startLatch, Lock lock, Condition consumable) {
		setName(name);
		this.buffers = new ArrayList<Buffer>(buffers);
		this.startLatch = startLatch;
		this.lock = lock;
		this.consumable = consumable;
	}
	
	private void consume() {		
		while(buffers.size() > 0) {
			lock.lock();
			
			for(Iterator<Buffer> iterator = buffers.iterator(); iterator.hasNext();) {
				Buffer buffer = iterator.next();
				Integer value = buffer.peek();
				if (value == null) {
					try {						
						consumable.await();
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
					iterator = buffers.iterator();
				}
				else {
					if (value.equals(0)) {
						iterator.remove();
						iterator = buffers.iterator();
					}
				}
			}
			
			for(Buffer buffer : buffers) {
				buffer.get();
			}
			
			lock.unlock();
			
			//Thread.yield(); // to prevent starvation of other consumers
		}
	}
	
	public void run() {
		try {
			startLatch.await();
			consume();
			Log.add(getName() + " stopped");
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
}